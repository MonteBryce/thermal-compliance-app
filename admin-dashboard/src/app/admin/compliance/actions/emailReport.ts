'use server';

import { getAdminFirestore } from '@/lib/firebase-admin';
import { cookies } from 'next/headers';
import { validateAdminSession } from '@/lib/auth-utils';
import { entriesCollectionRef, projectDocRef } from '@/lib/firestore/paths';
import nodemailer from 'nodemailer';
import { generateExcelReport } from './generateExcelReport';

interface EmailConfig {
  to: string[];
  cc?: string[];
  subject: string;
  projectId: string;
  logId: string;
  startDate: Date;
  endDate: Date;
  customMessage?: string;
}

export async function emailReport(config: EmailConfig): Promise<{
  success: boolean;
  messageId?: string;
  error?: string;
}> {
  const cookieStore = await cookies();
  const session = await validateAdminSession(cookieStore);
  
  if (!session || session.role !== 'admin') {
    throw new Error('Unauthorized: Admin access required');
  }

  const db = getAdminFirestore();
  
  try {
    // Generate the Excel report first
    const report = await generateExcelReport(
      config.projectId,
      config.logId,
      config.startDate,
      config.endDate
    );
    
    // Fetch the Excel file from the URL
    const response = await fetch(report.url);
    const buffer = await response.arrayBuffer();
    
    // Get project details for email body
    const projectDoc = await projectDocRef(config.projectId).get();
    const projectData = projectDoc.data()!;
    
    // Create transporter using environment variables
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST || 'smtp.gmail.com',
      port: parseInt(process.env.SMTP_PORT || '587'),
      secure: process.env.SMTP_SECURE === 'true',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });
    
    // Compose email
    const emailBody = `
Dear Customer,

Please find attached the thermal log report for:

Project: ${projectData.projectId}
Facility: ${projectData.facility}
Tank ID: ${projectData.tankId}
Period: ${config.startDate.toLocaleDateString()} - ${config.endDate.toLocaleDateString()}

${config.customMessage ? `\nNote: ${config.customMessage}\n` : ''}

Summary:
- Total Hours Logged: ${projectData.completedHours || 0}
- Log Type: ${projectData.logType}
- Status: ${projectData.status}

This report has been automatically generated by the Thermal Log Compliance System.

If you have any questions or concerns, please contact our compliance team.

Best regards,
Compliance Team
    `.trim();
    
    // Send email
    const info = await transporter.sendMail({
      from: process.env.SMTP_FROM || '"Compliance Team" <compliance@example.com>',
      to: config.to.join(', '),
      cc: config.cc?.join(', '),
      subject: config.subject || `Thermal Log Report - ${projectData.projectId} - ${new Date().toLocaleDateString()}`,
      text: emailBody,
      html: emailBody.replace(/\n/g, '<br>'),
      attachments: [
        {
          filename: report.fileName,
          content: Buffer.from(buffer),
          contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        },
      ],
    });
    
    // Log email in communications collection
    await db
      .collection('projects')
      .doc(config.projectId)
      .collection('communications')
      .add({
        type: 'email',
        subject: config.subject,
        to: config.to,
        cc: config.cc,
        attachments: [report.fileName],
        sentBy: session.uid,
        sentAt: new Date(),
        messageId: info.messageId,
        reportUrl: report.url,
      });
    
    return {
      success: true,
      messageId: info.messageId,
    };
  } catch (error) {
    console.error('Error sending email:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to send email',
    };
  }
}